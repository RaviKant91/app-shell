pipeline {
agent {label 'vm-label'} 
parameters {
   string(name: 'AppObj', defaultValue: '')
   string(name: 'PackageObj', defaultValue: '')
   choice(name: 'image_build', choices: ['cde-docker-registry.eic.fullstream.ai/cde-app-shell'])
   choice(name: 'Branch_to_Build', choices: ['develop','S1-R1','v1-non-root','license','US704436-LoggerAdapter','concurrency-appshell','refresh-token-keycloak','Dockerfile','quad','redis-issue','master','oauth-issue','redisConfig','static-page','for-logging','develop-without-cors','return-to-app','server_ut','system1-logo-change','common-configurable','bearer','DSAT','eicdev','adapter-with-auth','authoirzation','auth-merge','us-676299','us-673949','new-logs','redis-cache-session','develop_logout_issue','adapter','hotfix-login-console','passowrd_policy_4fb0e','UM_bknd_int','e2c-stable','userinfo','analytics-spike','GESS-changes','Context-sharing-with-missed-case','adapterNick','SPS-http-url-support','hitesh-team','deeplink-with-default-evenName','EIC_password_reset_issue_fix','deeplink-with-default-eventName-withadapter','tenant-missed-for-apps-issue-fixed','HotFix-contex-sharing-sps-remove-default-context-sharing','allow-access-control','Multiple-event-fix-on-context-sharing','692320-Fix-for-binary-datatype-json-file-upload','opensource','Fix-for-appbuilder-loading','704569-update-locals-in-camel-case','obfuscation','AppShell-performance-bundle-optimization','S1-R1AppShell-performance-improvement-caching'])
}
stages{

stage('Set up environment ')
{
steps{
script{
       cleanWs()
	   if ("${params.image_build}" == 'NA'){
                  currentBuild.result = 'ABORTED'
                  error('Build parameters not provided !!!')
               }
}

}
}

stage('git clone'){

steps{

 git branch: "${Branch_to_Build}" , credentialsId: 'NEW_BH_GIT' , url: 'https://github.com/bh-ent-tech/app-shell.git'

}

}

stage('npm build')

{  
  steps {
      withCredentials([file(credentialsId: 'npmrc', variable: 'npmrc')]){
     sh '''
    
        image_name=$image_build:$BUILD_NUMBER
        echo $image_name
        echo $AppObj
        echo $PackageObj
        echo $JSDEFENDER_LICENSE
        cat $npmrc > .npmrc
        npm install
        rm .npmrc
      '''
      }
  }
}
//stage('Av-Scaning')
	{  
	steps{
      sh '''
          pwd
		  ls *.tgz | tee bldjars.txt
		  while IFS= read -r line; do 
	     ls -l $line
	     curl -k -F "name=${line}-${BUILD_NUMBER}" -F "file=@./${line}" https://clamav-rest-1387575951.us-west-2.elb.amazonaws.com/scan | tee scan.out
		 flg=$(grep -w "Everything ok : false" scan.out | awk '{ print $4}')
             echo $flg 
             
				if [ $flg == "false" ]
				then
					echo "Scanning resule is -ve"
					currentBuild.result = 'FAILURE'
                fi			
         done < bldjars.txt
		  
		  
	  '''
	}
	}//
      stage('docker build')
          {
           environment {
               cde = credentials('cde-registry-credential-id')
            }
           steps{
                withCredentials([string(credentialsId: 'JSDEFENDER_LICENSE', variable: 'JSDEFENDER_LICENSE')]){
                sh '''image_name=$image_build:$BUILD_NUMBER
           echo $image_name
           echo $JSDEFENDER_LICENSE
           docker login --username $cde_USR cde-docker-registry.eic.fullstream.ai --password $cde_PSW
	   docker build --build-arg JSDEFENDER_LICENSE=$JSDEFENDER_LICENSE -t $image_name . 
           docker push $image_name
           docker rmi $image_name'''
  }
  }
   }

}
}
